#!/usr/bin/env python3

# Copyright (C) 2023  Yingbo Li
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os

##### FOR MODIFICATION:
# Directory containing the pixelmap files (including "pixinfo").
pixelmaps_dir = "./_pixelmaps"
# File name (= variable name) of interest for plotting as pixels.
z_variable = "V_tot"
# Colormap for pixel plot.
cmap = "BuPu"
#####

read_data = lambda data_line,dtype=float : [dtype(x.strip()) for x in data_line.split(" ") if x]

# Reading and processing plot metadata
with open(os.path.join(pixelmaps_dir,"pixinfo")) as infile:
    pixinfo = infile.read()
pix_data = pixinfo.split("\n")
database = pix_data[8]
x_label = pix_data[0]
y_label = pix_data[1]
ranges = read_data(pix_data[2])
x_range = ranges[:2]
y_range = ranges[2:]
n_pixels = read_data(pix_data[4],int)[:2]
n_x,n_y = n_pixels

# Preallocating full dataframe grid.
full_df = pd.DataFrame({"n":range(1,n_x*n_y+1)})
# Loading data of interest (may only be part of the grid).
pixelmap = os.path.join(pixelmaps_dir,z_variable)
df = pd.read_csv(pixelmap,sep="\s+",names=["n","x"])
# Adding data of interest into full grid.
full_df = full_df.join(df.set_index("n"),on="n")

# Converting 1D array data into 2D matrix data depending on the number of pixels on each axis.
array = np.array(full_df["x"]).reshape(n_y,n_x)
# Flip array to account for different data ordering.
array = np.flipud(array)

get_range = lambda arr : max(arr) - min(arr)
plt.imshow(array,cmap=cmap,extent=x_range + y_range,aspect=get_range(x_range)/get_range(y_range))
plt.colorbar(label=z_variable)
plt.xlabel(x_label)
plt.ylabel(y_label)
plt.title("Data generated by Theriak-Domino using " + database)
# plt.savefig("_pixelmaps/example.png")
plt.show()
